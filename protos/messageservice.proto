syntax = "proto3";

// MessageService handles all tasks.
service MessageService {
    // Let a user register with a given username.
    rpc Register(UsernameRequest) returns (StatusCodeResponse) {}

    // Let a user login with a given username, delivering any unread messages.
    // Immediately after logging in, in order to instantly receive new messages
    // that are sent, a client should call the Subscribe rpc.
    rpc Login(UsernameRequest) returns (LoginResponse) {}

    // Opens a stream of communication from the server to the user, delivering
    // unread messages as they are sent.
    rpc Subscribe(UsernameRequest) returns (stream Message) {}

    // Let a user search for usernames using text/wildcard search.
    rpc Search(SearchRequest) returns (SearchResponse) {}

    // Let a user send a message to another user (or themselves for whatever reason).
    // The message will be delivered instantly if the recipient is logged in, or
    // buffered to be delivered upon the recipient's next login.
    rpc Send(MessageRequest) returns (StatusCodeResponse) {}

    // Let a user logout with a given username.
    rpc Logout(UsernameRequest) returns (StatusCodeResponse) {}

    // Let a user delete their account with a given username. The user will be
    // automatically logged out.
    rpc Delete(UsernameRequest) returns (StatusCodeResponse) {}
}

// *** Protos used for client requests ***
// Proto used for register, login, logout, and delete
// Only a username string is required
message UsernameRequest {
    string username = 1;
}

// Proto used for search
// Only a query string is required
message SearchRequest {
    string query = 1;
}

// Proto used for send
// A sender, receiver, and message are required
message MessageRequest {
    string sender = 1;
    string recipient = 2;
    string body = 3;
}

// *** Protos used for server responses ***
// Proto used for (an already-specified) client receiving messages
// A sender and message body are required
message Message {
    string sender = 1;
    string body = 2;
}

// Proto used for register, send (to the sender), logout, and delete
// Only a status code is required
// The specific types of possible status codes are given in utils.py
message StatusCodeResponse {
    int32 statusCode = 1;
}

// Proto used for search
// A status code and results, if any, are required
message SearchResponse {
    int32 statusCode = 1;
    repeated string results = 2;
}

// Proto used for login
// A status code and unread messages, if any, are required
message LoginResponse {
    int32 statusCode = 1;
    repeated Message messages = 2;
}